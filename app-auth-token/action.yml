name: "GitHub App Authentication & Token Retrieval"
description: "Generates an installation token for a GitHub App with any permissions."

inputs:
  app_id:
    description: "GitHub App ID"
    required: true
  private_key:
    description: "Private key for the GitHub App"
    required: true
  organisation:
    description: "GitHub organisation or account login where the app is installed"
    required: true

outputs:
  token:
    description: "Installation token for the GitHub App"
    value: ${{ steps.install_token.outputs.TOKEN }}

runs:
  using: "composite"
  steps:
    # Step 1: Generate JWT for the GitHub App
    - name: Generate JWT
      id: jwt
      shell: pwsh
      run: |
        # Write the private key to a file
        echo "${{ inputs.private_key }}" | Out-File -FilePath private-key.pem -Encoding ascii

        # Create JWT header & payload
        $header = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('{"alg":"RS256","typ":"JWT"}')).Replace('+','-').Replace('/','_').Replace('=','')
        $iat = [int][double]::Parse((Get-Date -UFormat %s)) - 60
        $exp = $iat + 600
        $payload = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("{`"iat`":$iat,`"exp`":$exp,`"iss`":`"${{ inputs.app_id }}`"}")).Replace('+','-').Replace('/','_').Replace('=','')

        $headerPayload = "$header.$payload"

        # Save headerPayload to a temporary file
        $headerPayload | Out-File -FilePath headerPayload.tmp -Encoding ascii

        # Use openssl to sign the payload
        $signature = & openssl dgst -sha256 -sign private-key.pem -binary -out - headerPayload.tmp | openssl base64 -A
        $signature = $signature -replace '\+', '-' -replace '/', '_' -replace '=', ''

        # Clean up temporary file
        Remove-Item -Force headerPayload.tmp

        # Combine the JWT
        echo "JWT=$headerPayload.$signature" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Step 2: Retrieve Installation ID for the App
    - name: Get Installation ID
      id: install_id
      shell: pwsh
      run: |
        $response = curl -s -X GET `
          -H "Authorization: Bearer $env:JWT" `
          -H "Accept: application/vnd.github+json" `
          https://api.github.com/app/installations

        $installId = ($response | ConvertFrom-Json) | Where-Object { $_.account.login -eq "${{ inputs.organisation }}" } | Select-Object -ExpandProperty id
        if (-not $installId) 
        {
          Write-Error "Installation ID not found for organisation '${{ inputs.organisation }}'."
          exit 1
        }
        echo "INSTALLATION_ID=$installId" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Step 3: Retrieve Installation Token
    - name: Get Installation Token
      id: install_token
      shell: pwsh
      run: |
        $response = curl -s -X POST `
          -H "Authorization: Bearer $env:JWT" `
          -H "Accept: application/vnd.github+json" `
          https://api.github.com/app/installations/$env:INSTALLATION_ID/access_tokens

        $token = ($response | ConvertFrom-Json).token
        if (-not $token) 
        {
          Write-Error "Failed to retrieve installation token."
          exit 1
        }
        echo "TOKEN=$token" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
